#include <iostream>
#include <vector>
#include <omp.h>

int main() {
    std::vector<int> data = {4, 8, 15, 16, 23, 42};  // sample data
    int n = data.size();

    int minVal = data[0];
    int maxVal = data[0];
    long long sum = 0;

    #pragma omp parallel for reduction(+:sum) reduction(min:minVal) reduction(max:maxVal)
    for (int i = 0; i < n; ++i) {
        sum += data[i];
        if (data[i] < minVal) minVal = data[i];
        if (data[i] > maxVal) maxVal = data[i];
    }

    double average = static_cast<double>(sum) / n;

    std::cout << "Min: " << minVal << std::endl;
    std::cout << "Max: " << maxVal << std::endl;
    std::cout << "Sum: " << sum << std::endl;
    std::cout << "Average: " << average << std::endl;

    return 0;
}
